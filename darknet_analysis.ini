./darknet detect cfg/yolo.cfg yolo.weights data/dog.jpg

layer     filters    size              input                output
    0 conv     32  3 x 3 / 1   608 x 608 x   3   ->   608 x 608 x  32
    1 max          2 x 2 / 2   608 x 608 x  32   ->   304 x 304 x  32
    2 conv     64  3 x 3 / 1   304 x 304 x  32   ->   304 x 304 x  64
    3 max          2 x 2 / 2   304 x 304 x  64   ->   152 x 152 x  64
    4 conv    128  3 x 3 / 1   152 x 152 x  64   ->   152 x 152 x 128
    5 conv     64  1 x 1 / 1   152 x 152 x 128   ->   152 x 152 x  64
    6 conv    128  3 x 3 / 1   152 x 152 x  64   ->   152 x 152 x 128
    7 max          2 x 2 / 2   152 x 152 x 128   ->    76 x  76 x 128
    8 conv    256  3 x 3 / 1    76 x  76 x 128   ->    76 x  76 x 256
    9 conv    128  1 x 1 / 1    76 x  76 x 256   ->    76 x  76 x 128
   10 conv    256  3 x 3 / 1    76 x  76 x 128   ->    76 x  76 x 256
   11 max          2 x 2 / 2    76 x  76 x 256   ->    38 x  38 x 256
   12 conv    512  3 x 3 / 1    38 x  38 x 256   ->    38 x  38 x 512
   13 conv    256  1 x 1 / 1    38 x  38 x 512   ->    38 x  38 x 256
   14 conv    512  3 x 3 / 1    38 x  38 x 256   ->    38 x  38 x 512
   15 conv    256  1 x 1 / 1    38 x  38 x 512   ->    38 x  38 x 256
   16 conv    512  3 x 3 / 1    38 x  38 x 256   ->    38 x  38 x 512
   17 max          2 x 2 / 2    38 x  38 x 512   ->    19 x  19 x 512
   18 conv   1024  3 x 3 / 1    19 x  19 x 512   ->    19 x  19 x1024
   19 conv    512  1 x 1 / 1    19 x  19 x1024   ->    19 x  19 x 512
   20 conv   1024  3 x 3 / 1    19 x  19 x 512   ->    19 x  19 x1024
   21 conv    512  1 x 1 / 1    19 x  19 x1024   ->    19 x  19 x 512
   22 conv   1024  3 x 3 / 1    19 x  19 x 512   ->    19 x  19 x1024
   23 conv   1024  3 x 3 / 1    19 x  19 x1024   ->    19 x  19 x1024
   24 conv   1024  3 x 3 / 1    19 x  19 x1024   ->    19 x  19 x1024
   25 route  16
   26 conv     64  1 x 1 / 1    38 x  38 x 512   ->    38 x  38 x  64
   27 reorg              / 2    38 x  38 x  64   ->    19 x  19 x 256
   28 route  27 24
   29 conv   1024  3 x 3 / 1    19 x  19 x1280   ->    19 x  19 x1024
   30 conv    425  1 x 1 / 1    19 x  19 x1024   ->    19 x  19 x 425
   31 detection
mask_scale: Using default '1.000000'
Loading weights from yolo.weights...Done!
load_image_color: w 768, h 576, c 3
letterbox_image: w 608, h 608, c 3
network_predict: forward_network
forward_network cpu: i:0, in (h, w, c): (608, 608, 3), out (h, w, c): (608, 608, 32), l.truth: 0, l.batch: 1
forward_network cpu: i:1, in (h, w, c): (608, 608, 32), out (h, w, c): (304, 304, 32), l.truth: 0, l.batch: 1
forward_network cpu: i:2, in (h, w, c): (304, 304, 32), out (h, w, c): (304, 304, 64), l.truth: 0, l.batch: 1
forward_network cpu: i:3, in (h, w, c): (304, 304, 64), out (h, w, c): (152, 152, 64), l.truth: 0, l.batch: 1
forward_network cpu: i:4, in (h, w, c): (152, 152, 64), out (h, w, c): (152, 152, 128), l.truth: 0, l.batch: 1
forward_network cpu: i:5, in (h, w, c): (152, 152, 128), out (h, w, c): (152, 152, 64), l.truth: 0, l.batch: 1
forward_network cpu: i:6, in (h, w, c): (152, 152, 64), out (h, w, c): (152, 152, 128), l.truth: 0, l.batch: 1
forward_network cpu: i:7, in (h, w, c): (152, 152, 128), out (h, w, c): (76, 76, 128), l.truth: 0, l.batch: 1
forward_network cpu: i:8, in (h, w, c): (76, 76, 128), out (h, w, c): (76, 76, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:9, in (h, w, c): (76, 76, 256), out (h, w, c): (76, 76, 128), l.truth: 0, l.batch: 1
forward_network cpu: i:10, in (h, w, c): (76, 76, 128), out (h, w, c): (76, 76, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:11, in (h, w, c): (76, 76, 256), out (h, w, c): (38, 38, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:12, in (h, w, c): (38, 38, 256), out (h, w, c): (38, 38, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:13, in (h, w, c): (38, 38, 512), out (h, w, c): (38, 38, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:14, in (h, w, c): (38, 38, 256), out (h, w, c): (38, 38, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:15, in (h, w, c): (38, 38, 512), out (h, w, c): (38, 38, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:16, in (h, w, c): (38, 38, 256), out (h, w, c): (38, 38, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:17, in (h, w, c): (38, 38, 512), out (h, w, c): (19, 19, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:18, in (h, w, c): (19, 19, 512), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:19, in (h, w, c): (19, 19, 1024), out (h, w, c): (19, 19, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:20, in (h, w, c): (19, 19, 512), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:21, in (h, w, c): (19, 19, 1024), out (h, w, c): (19, 19, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:22, in (h, w, c): (19, 19, 512), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:23, in (h, w, c): (19, 19, 1024), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:24, in (h, w, c): (19, 19, 1024), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:25, in (h, w, c): (0, 0, 0), out (h, w, c): (38, 38, 512), l.truth: 0, l.batch: 1
forward_network cpu: i:26, in (h, w, c): (38, 38, 512), out (h, w, c): (38, 38, 64), l.truth: 0, l.batch: 1
forward_network cpu: i:27, in (h, w, c): (38, 38, 64), out (h, w, c): (19, 19, 256), l.truth: 0, l.batch: 1
forward_network cpu: i:28, in (h, w, c): (0, 0, 0), out (h, w, c): (19, 19, 1280), l.truth: 0, l.batch: 1
forward_network cpu: i:29, in (h, w, c): (19, 19, 1280), out (h, w, c): (19, 19, 1024), l.truth: 0, l.batch: 1
forward_network cpu: i:30, in (h, w, c): (19, 19, 1024), out (h, w, c): (19, 19, 425), l.truth: 0, l.batch: 1
forward_network cpu: i:31, in (h, w, c): (19, 19, 425), out (h, w, c): (19, 19, 425), l.truth: 0, l.batch: 1
data/dog.jpg: Predicted in 75.920722 seconds.
dog: 82%
car: 27%
truck: 65%
bicycle: 85%

